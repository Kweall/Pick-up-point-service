// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: point-service/v1/point_service.proto

package point_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for ClientId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReceivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReceivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReturnedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ReturnedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Weight

	// no validation rules for Price

	// no validation rules for Packaging

	// no validation rules for AdditionalFilm

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderHistoryMultiError, or
// nil if none found.
func (m *OrderHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderHistoryMultiError(errors)
	}

	return nil
}

// OrderHistoryMultiError is an error wrapping multiple validation errors
// returned by OrderHistory.ValidateAll() if the designated constraints aren't met.
type OrderHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderHistoryMultiError) AllErrors() []error { return m }

// OrderHistoryValidationError is the validation error returned by
// OrderHistory.Validate if the designated constraints aren't met.
type OrderHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderHistoryValidationError) ErrorName() string { return "OrderHistoryValidationError" }

// Error satisfies the builtin error interface
func (e OrderHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderHistoryValidationError{}

// Validate checks the field values on AddOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderRequestMultiError, or nil if none found.
func (m *AddOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClientId() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "ClientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrderRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrderRequestValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetWeight() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPackaging()); l < 3 || l > 15 {
		err := AddOrderRequestValidationError{
			field:  "Packaging",
			reason: "value length must be between 3 and 15 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.AdditionalFilm != nil {
		// no validation rules for AdditionalFilm
	}

	if len(errors) > 0 {
		return AddOrderRequestMultiError(errors)
	}

	return nil
}

// AddOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AddOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderRequestMultiError) AllErrors() []error { return m }

// AddOrderRequestValidationError is the validation error returned by
// AddOrderRequest.Validate if the designated constraints aren't met.
type AddOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderRequestValidationError) ErrorName() string { return "AddOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderRequestValidationError{}

// Validate checks the field values on AddOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderResponseMultiError, or nil if none found.
func (m *AddOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrderResponseMultiError(errors)
	}

	return nil
}

// AddOrderResponseMultiError is an error wrapping multiple validation errors
// returned by AddOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type AddOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderResponseMultiError) AllErrors() []error { return m }

// AddOrderResponseValidationError is the validation error returned by
// AddOrderResponse.Validate if the designated constraints aren't met.
type AddOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderResponseValidationError) ErrorName() string { return "AddOrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderResponseValidationError{}

// Validate checks the field values on DeleteOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderRequestMultiError, or nil if none found.
func (m *DeleteOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := DeleteOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrderRequestMultiError(errors)
	}

	return nil
}

// DeleteOrderRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderRequestMultiError) AllErrors() []error { return m }

// DeleteOrderRequestValidationError is the validation error returned by
// DeleteOrderRequest.Validate if the designated constraints aren't met.
type DeleteOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderRequestValidationError) ErrorName() string {
	return "DeleteOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderRequestValidationError{}

// Validate checks the field values on DeleteOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderResponseMultiError, or nil if none found.
func (m *DeleteOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrderResponseMultiError(errors)
	}

	return nil
}

// DeleteOrderResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderResponseMultiError) AllErrors() []error { return m }

// DeleteOrderResponseValidationError is the validation error returned by
// DeleteOrderResponse.Validate if the designated constraints aren't met.
type DeleteOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderResponseValidationError) ErrorName() string {
	return "DeleteOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderResponseValidationError{}

// Validate checks the field values on GiveOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GiveOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrderRequestMultiError, or nil if none found.
func (m *GiveOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrderIds()) < 1 {
		err := GiveOrderRequestValidationError{
			field:  "OrderIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GiveOrderRequestMultiError(errors)
	}

	return nil
}

// GiveOrderRequestMultiError is an error wrapping multiple validation errors
// returned by GiveOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type GiveOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrderRequestMultiError) AllErrors() []error { return m }

// GiveOrderRequestValidationError is the validation error returned by
// GiveOrderRequest.Validate if the designated constraints aren't met.
type GiveOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrderRequestValidationError) ErrorName() string { return "GiveOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GiveOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrderRequestValidationError{}

// Validate checks the field values on GiveOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GiveOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrderResponseMultiError, or nil if none found.
func (m *GiveOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GiveOrderResponseMultiError(errors)
	}

	return nil
}

// GiveOrderResponseMultiError is an error wrapping multiple validation errors
// returned by GiveOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type GiveOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrderResponseMultiError) AllErrors() []error { return m }

// GiveOrderResponseValidationError is the validation error returned by
// GiveOrderResponse.Validate if the designated constraints aren't met.
type GiveOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrderResponseValidationError) ErrorName() string {
	return "GiveOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrderResponseValidationError{}

// Validate checks the field values on GetOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersRequestMultiError, or nil if none found.
func (m *GetOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClientId() <= 0 {
		err := GetOrdersRequestValidationError{
			field:  "ClientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrdersRequestMultiError(errors)
	}

	return nil
}

// GetOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersRequestMultiError) AllErrors() []error { return m }

// GetOrdersRequestValidationError is the validation error returned by
// GetOrdersRequest.Validate if the designated constraints aren't met.
type GetOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersRequestValidationError) ErrorName() string { return "GetOrdersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersRequestValidationError{}

// Validate checks the field values on GetOrdersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersResponseMultiError, or nil if none found.
func (m *GetOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrdersResponseMultiError(errors)
	}

	return nil
}

// GetOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersResponseMultiError) AllErrors() []error { return m }

// GetOrdersResponseValidationError is the validation error returned by
// GetOrdersResponse.Validate if the designated constraints aren't met.
type GetOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersResponseValidationError) ErrorName() string {
	return "GetOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersResponseValidationError{}

// Validate checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnRequestMultiError, or nil if none found.
func (m *AcceptReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClientId() <= 0 {
		err := AcceptReturnRequestValidationError{
			field:  "ClientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := AcceptReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptReturnRequestMultiError(errors)
	}

	return nil
}

// AcceptReturnRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnRequestMultiError) AllErrors() []error { return m }

// AcceptReturnRequestValidationError is the validation error returned by
// AcceptReturnRequest.Validate if the designated constraints aren't met.
type AcceptReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnRequestValidationError) ErrorName() string {
	return "AcceptReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnRequestValidationError{}

// Validate checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnResponseMultiError, or nil if none found.
func (m *AcceptReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AcceptReturnResponseMultiError(errors)
	}

	return nil
}

// AcceptReturnResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnResponseMultiError) AllErrors() []error { return m }

// AcceptReturnResponseValidationError is the validation error returned by
// AcceptReturnResponse.Validate if the designated constraints aren't met.
type AcceptReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnResponseValidationError) ErrorName() string {
	return "AcceptReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnResponseValidationError{}

// Validate checks the field values on GetReturnsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsRequestMultiError, or nil if none found.
func (m *GetReturnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := GetReturnsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReturnsRequestMultiError(errors)
	}

	return nil
}

// GetReturnsRequestMultiError is an error wrapping multiple validation errors
// returned by GetReturnsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReturnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsRequestMultiError) AllErrors() []error { return m }

// GetReturnsRequestValidationError is the validation error returned by
// GetReturnsRequest.Validate if the designated constraints aren't met.
type GetReturnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsRequestValidationError) ErrorName() string {
	return "GetReturnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsRequestValidationError{}

// Validate checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsResponseMultiError, or nil if none found.
func (m *GetReturnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReturnsResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReturnsResponseMultiError(errors)
	}

	return nil
}

// GetReturnsResponseMultiError is an error wrapping multiple validation errors
// returned by GetReturnsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReturnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsResponseMultiError) AllErrors() []error { return m }

// GetReturnsResponseValidationError is the validation error returned by
// GetReturnsResponse.Validate if the designated constraints aren't met.
type GetReturnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsResponseValidationError) ErrorName() string {
	return "GetReturnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsResponseValidationError{}
